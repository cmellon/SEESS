package com.space;

import java.util.ArrayList;
import java.util.Iterator;

import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.audio.*;
import com.badlogic.gdx.graphics.*;
import com.badlogic.gdx.graphics.Texture.TextureFilter;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.TimeUtils;

public class GameScreen implements Screen {

	// This class handles displaying and updating all objects on the gameScreen
	// It does not handle storing data for the Space.player or enemy stats
	// Space.player images and projectiles are stored in the Space.player class
	// Enemies and enemy projectiles are stored and manipulated in this class so that when an enemy dies it's projectiles dont despawn
	
	ArrayList<Projectile> testExplosions = new ArrayList<Projectile>();

	
	double angle = 0;
	
		Space imageLib;
		//Game States:
		boolean gameOver = false;
		boolean startScreen = false;
		boolean paused = false;
		boolean dead;
		
		Texture blankImg;
		Texture shipImg;
		Texture enemyImg;
		Texture enemyLaserImg;
		Texture laserImg;
		Texture windImg, fireImg, lightningImg;
		Texture backgroundImg;
		Texture explosionImg;
		
		Rectangle background1;
		   Rectangle background2;
		
		Texture hudImg;
		Texture healthBarImg;
		Texture pulserImg;
		Texture timerBarImg;
		
		int projectileType = 0;
		//Sound laserSFX;
		//Music backgroundMusic;
	
	   OrthographicCamera camera;
	   SpriteBatch batch;
	   
	   private Texture texture;
	    private Sprite sprite;
	    private BitmapFont font;
	   
	   
	   ArrayList<Enemy> enemies = new ArrayList<Enemy>();
	   ArrayList<Projectile>enemyShots = new ArrayList<Projectile>();
	   ArrayList<Rectangle> explosions = new ArrayList<Rectangle>();
	   ArrayList<Loot> drops = new ArrayList<Loot>();
	
	   //Rectangle testEnemy;
	   private long second = 1000000000;
	   long lastSpawnTime;
	   long enemySpawnRate = 2*second;
	   long lastShotTime;
	   long enemyShotRate = 4*second;
	   int enemyVelocityBoost = 10;
	   int enemyShotVelocityBoost = 20;
	   
	   long waveDuration = 30; //= 30second+(5seconds*wave)
	   //Enemy spawn rate should be wave duration/enemiesLeft and of long type	
	   
	   int wave;
	   int enemiesSpawned;
	   int enemiesKilled;
	   int enemiesLeft;
	   
	   boolean released = true;
	   
	   int currentFrame;
	   int explosionFrame;
	   

	
	public GameScreen(Space game) {
		// TODO Auto-generated constructor stub
		this.imageLib = game;
		this.blankImg = imageLib.blankImg;
		this.hudImg = imageLib.hudImg;
		this.healthBarImg = imageLib.healthBarImg;
		this.pulserImg = imageLib.pulserImg;
		this.timerBarImg = imageLib.timerBarImg;
		
		shipImg = imageLib.shipImg;
		explosionImg = imageLib.explosionImg;

		
		backgroundImg = imageLib.backgroundImg;
		
		enemyImg = imageLib.enemyImg;
		enemyLaserImg = imageLib.enemyLaserImg;
		
		
		laserImg = imageLib.laserImg;
		windImg = imageLib.windImg;
		fireImg = imageLib.fireImg;
		lightningImg = imageLib.lightningImg;

		
		// load the drop sound effect and the rain background "music"
	     // laserSFX = Gdx.audio.newSound(Gdx.files.internal("LASER1.wav"));
	      //backgroundMusic = Gdx.audio.newMusic(Gdx.files.internal("music.mp3"));
	      
	      // start the playback of the background music immediately
	      //backgroundMusic.setLooping(true);
	      //backgroundMusic.play();
	      
	      // initialize bucket
	      camera = new OrthographicCamera();
	      camera.setToOrtho(false, 800, 480);
	      
	      batch = new SpriteBatch();
	      
	        texture = imageLib.texture;
	        texture.setFilter(TextureFilter.Linear, TextureFilter.Linear);

	        TextureRegion region = new TextureRegion(texture, 0, 0, 512, 275);

	        sprite = new Sprite(region);
	        sprite.setSize(0.9f, 0.9f * sprite.getHeight() / sprite.getWidth());
	        sprite.setOrigin(sprite.getWidth() / 2, sprite.getHeight() / 2);
	        sprite.setPosition(-sprite.getWidth() / 2, -sprite.getHeight() / 2);

	        font = imageLib.font;
		
	        background1 = new Rectangle();
		    background1.x = 0;
		    background1.y = 0;
		    background1.width = 1000;
		    background1.height = 480;
		      
		    background2 = new Rectangle();
		    background2.x = 1000;
		    background2.y = 0;
		    background2.width = 1000;
		    background2.height = 480;
	}


	

	@Override
	public void resize(int width, int height) {
		// TODO Auto-generated method stub
		
	}

	private void update() {
		// TODO Auto-generated method stub
		currentFrame= currentFrame+1%60;
		explosionFrame++;
	    if(Gdx.input.isTouched()) {
	    	Space.player.moveToTouch(camera); 
	    	
	    	//System.out.println("X: "+Gdx.input.getX());
	    	//System.out.println("Y: "+Gdx.input.getY());
	    }
	    
	    if(Gdx.input.isKeyPressed(Keys.LEFT)) Space.player.moveLeft();
	    if(Gdx.input.isKeyPressed(Keys.RIGHT)) Space.player.moveRight();
	    if(Gdx.input.isKeyPressed(Keys.UP)) Space.player.moveUp();
	    if(Gdx.input.isKeyPressed(Keys.DOWN)) Space.player.moveDown();
	    if(Gdx.input.isKeyPressed(Keys.SPACE)) {Space.player.fire(); /*System.out.println("Shot fired, shots: " + shots.size());*/}
	    if(!Gdx.input.isKeyPressed(Keys.SPACE)) Space.player.stopFiring();
	    if(Gdx.input.isKeyPressed(Keys.NUM_1)) {if(Space.player.currentForm == -1)Space.player.transform(0);}
	    if(Gdx.input.isKeyPressed(Keys.NUM_2)) {if(Space.player.currentForm == -1)Space.player.transform(1);}
	    if(Gdx.input.isKeyPressed(Keys.NUM_3)) {if(Space.player.currentForm == -1)Space.player.transform(2);}
	    
	    //Debugging/Cool/Cheats
	    if(Gdx.input.isKeyPressed(Keys.R)){Space.player.currentForm = -1; Space.player.health = Space.player.healthMax;}
	    if(Gdx.input.isKeyPressed(Keys.A)){
	    	//Printout
			System.out.println(Space.player.laserFireRate);
			System.out.println(Space.player.shipLvl);
			System.out.println(Space.player.baseSpeed);
			System.out.println(Space.player.health);
			System.out.println(Space.player.healthMax);
			System.out.println(Space.player.laserDamage);
			System.out.println(Space.player.laserFireRate);

			System.out.println(Space.player.healthCost);
			System.out.println(Space.player.laserDamageCost);
			System.out.println(Space.player.laserFireRateCost);
			System.out.println(Space.player.velocityCost);

			//Fire
			System.out.println(Space.player. fireFormLvl);
			System.out.println(Space.player.fireFormDuration);
			System.out.println(Space.player.fireballDamage);
			System.out.println(Space.player.fireballVelocity);
			System.out.println(Space.player.fireballFireRate);
			System.out.println(Space.player.fireCapacity);

			System.out.println(Space.player.fireFormDurationCost);
			System.out.println(Space.player.fireballDamageCost);
			System.out.println(Space.player.fireballFireRateCost);
			System.out.println(Space.player.fireballVelocityCost);
			System.out.println(Space.player.fireCapacityCost); 

			//Lightning
			System.out.println(Space.player.lightningFormLvl);
			System.out.println(Space.player. lightningBoltDamage);
			System.out.println(Space.player.lightningBoltVelocity);
			System.out.println(Space.player.lightningFormDuration);
			System.out.println(Space.player.lightningBoltFireRate);
			System.out.println(Space.player.lightningCapacity);

			System.out.println(Space.player.lightningFormDurationCost);
			System.out.println(Space.player.lightningDamageCost);

			//Wind
			System.out.println(Space.player.windFormLvl);
			System.out.println(Space.player.windFormDuration);
			System.out.println(Space.player.windBladeFireRate);
			System.out.println(Space.player.windCapacity);
			System.out.println(Space.player.windFormVelocityBoost);

			System.out.println(Space.player.windFormDurationCost);
			System.out.println(Space.player.windBladeDamageCost);
			System.out.println(Space.player.windBladeFireRateCost);
			System.out.println(Space.player.windFormVelocityCost);
			
			
			System.out.println(Space.player.shipXp);
			System.out.println(Space.player.fireFormXp);
			System.out.println(Space.player.windFormXp);
			System.out.println(Space.player.lightningFormXp);
			System.out.println(Space.player.careerKills);

			System.out.println(Space.player.genericOrbs);
			System.out.println(Space.player.spendableFireOrbs);
			System.out.println(Space.player.spendableWindOrbs);
			System.out.println(Space.player.spendableLightningOrbs);
			System.out.println(Space.player.fireOrbs);
			System.out.println(Space.player.windOrbs);
			System.out.println(Space.player.lightningOrbs);
			nextWave(); }
	    if(Gdx.input.isKeyPressed(Keys.S)) {
	    	angle = (angle+1)%360;
	    	testExplosions.add(new Projectile(imageLib, 400, 240, 0, angle));

	    }
	    if(Gdx.input.isKeyPressed(Keys.D)) Space.player.speed--;
	    if(Gdx.input.isKeyPressed(Keys.F)) Space.player.speed++;
	    if(Gdx.input.isKeyPressed(Keys.G)) projectileType = 11;
	    
	    // Update background
	    background1.x -= 40 * Gdx.graphics.getDeltaTime();
	     background2.x -= 40 * Gdx.graphics.getDeltaTime();
	     if(background1.x < -1000)background1.x=1000;
	     if(background2.x < -1000)background2.x=1000;
	     
	      
	    //Spawn Enemy Projectiles
	    if((TimeUtils.nanoTime() - lastShotTime > (enemyShotRate))){
	    	  if(enemies.size()!=0){
	    		  lastShotTime = TimeUtils.nanoTime();
	    	  int randomEnemyNumber = (int) (TimeUtils.nanoTime()%(enemies.size()));
	    	  enemyShots.add(new Projectile(imageLib, enemies.get(randomEnemyNumber).ship.x-4, (enemies.get(randomEnemyNumber).ship.y+enemies.get(randomEnemyNumber).ship.height)-12, 11));
	    	  enemyShots.add(new Projectile(imageLib, enemies.get(randomEnemyNumber).ship.x-4, enemies.get(randomEnemyNumber).ship.y+6, 11));
	    	  }
	      }
	    
	      //Spawn enemies
	      if(TimeUtils.nanoTime() - lastSpawnTime > (enemySpawnRate)) {
	    	  if (enemiesLeft>0)spawnEnemy();
	    	  //Spawn test enemies
	    	  }//enemySpawnRate increases by 1 for every wave
	      
	      enemiesLeft = (20+(wave*5))- enemiesSpawned; 
	      //System.out.println(enemiesLeft);
	      
	      
	      //Enemy Update Loop
	     for(int i = 0; i<enemies.size(); i++){
	    	 boolean removed = false;
	    	 enemies.get(i).getRect().x -= (100+enemyVelocityBoost) * Gdx.graphics.getDeltaTime();// move enemies add (wave%4+1)* to make them speed up per wabe
	         if(enemies.get(i).getRect().x + 48 < 0) {enemies.remove(i); removed = true;}
	         if(enemies.size()!=0 && !removed && enemies.get(i).getRect().overlaps(Space.player.getShip()) && Space.player.currentForm!=4) {
	        	 Space.player.health -= enemies.get(i).collideDamage;
	        	 enemies.remove(i);
	         }// if enemy touching Space.player
	      }
	     
	   //Test Enemy Update Loop
	     //This loop updates according to the physics equation for finding two dimensional position using an angle
	     /**Woot Physics Class! ^.^ 
	      * Y = Y(original)+Velocity*Sin(angle)*time + 1/2*Acceleration*time*time
	      *  X = X(original)+Velocity*Cos(angle)*time + 1/2*Acceleration*time*time
	      * Code version:
	      * 
	      * Y = Y + Speed*Sin(angle)*time + 1/2 * Acceleration*time*time
	      * X = X + Speed*Cos(angle)*time + 1/2 * Acceleration*time*time
	      * 
	      * Or for this particular case Acceleration is 0 for both x and y and we use delta time sooo...
	      * Y+= Speed*Sin(angle)*time
	      * X+= Speed*Cos(angle)*time
	      */
	     
	     for(int i = 0; i<testExplosions.size(); i++){
	    	 boolean removed = false;
	    	 testExplosions.get(i).getRect().x -= (300)*(Math.cos(testExplosions.get(i).angle))*Gdx.graphics.getDeltaTime();// move testEnemies add (wave%4+1)* to make them speed up per wabe
	    	 testExplosions.get(i).getRect().y -= (300)*(Math.sin(testExplosions.get(i).angle))*Gdx.graphics.getDeltaTime();// move testEnemies add (wave%4+1)* to make them speed up per wabe

	    	 if(testExplosions.get(i).getRect().x + 48 < 0||testExplosions.get(i).getRect().y>480) {testExplosions.remove(i); removed = true;}
	         /*if(!removed && testEnemies.get(i).getRect().overlaps(Space.player.getShip())) {
	        	 
	        	 testEnemies.remove(i);
	         }// if enemy touching Space.player*/
	      }
	     
	     //Space.player Shots update Loop
	     for(int i = 0; i<Space.player.getShots().size(); i++){
	    	 boolean offScreen = false;
	    	 boolean contactEnemy = false;
	    	 Space.player.getShots().get(i).getRect().x += (Space.player.getShots().get(i).getSpeed()) * Gdx.graphics.getDeltaTime(); // update position
	         for (int j = 0; j<enemies.size(); j++){// test to see if the laser is touching any enemy
	         if(Space.player.getShots().get(i).getRect().overlaps(enemies.get(j).getRect())||(Space.player.getShots().get(i).getRect().x + 48 > 840)){
	        	 if(Space.player.getShots().get(i).getRect().x + 48 > 840) {
	        		 //Space.player.getShots().remove(i);
	        		 //System.out.println("Shot " + i + " off screen.");
	        		 offScreen = true;
	        	 }
	        	 else { //Enemy gets hit block
	        		 //Dont remove the enemy or shot here since it has to get cross checked for other objects.
	        		 enemies.get(j).health = enemies.get(j).health - (Space.player.getShots().get(i).getDamage()); // damage enemy equal to damage of projectile
	        		 contactEnemy = true;
	        		 }
	         	}
	         }
	         if (contactEnemy || offScreen)Space.player.getShots().remove(i);
	      }
	     //Check for enemies' death
	     for (int i= 0; i<enemies.size();i++){
	     if (enemies.get(i).health < 0) {
			 destroyEnemy(i);
			 Space.player.gainXp(10);
			 enemiesKilled++; 
			 }
	     }
	     //Enemy Shots update loop
	     for (int i = 0; i<enemyShots.size();i++){ 
	    	 enemyShots.get(i).rectangle.x -= (enemyShots.get(i).getSpeed()+enemyShotVelocityBoost)*Gdx.graphics.getDeltaTime();
	    	 if (enemyShots.get(i).getRect().overlaps(Space.player.ship)){
	    		 Space.player.health -= enemyShots.get(i).getDamage();
	    		 enemyShots.remove(i);
	    	 }
	    	 if (Space.player.health<=0 && Space.player.currentForm!=4){
	    		 Space.player.die();
	    		 explosionFrame = 0;
	    		 //TODO take out this or  modify it. XD
	    	 
	    	 	}
	    	 	if(Space.player.currentForm==4 && explosionFrame<60){testExplosions.add(new Projectile(imageLib, Space.player.getShip().x, Space.player.getShip().y, 0, explosionFrame%360));
	    	  		}
	    	 	}
	     //Wave Finished Check
	     if (enemiesLeft<=0 && enemies.size()==0 && Space.player.currentForm!=4){
			 nextWave();	 
		 }
	     
	     //Drops update loop
	     for (int i = 0; i<drops.size();i++){
	    	 drops.get(i).getRect().x -= (80)*Gdx.graphics.getDeltaTime();
	     if(drops.get(i).getRect().overlaps(Space.player.getShip())||drops.get(i).getRect().x < -50) {
	    	 if(drops.get(i).getRect().overlaps(Space.player.getShip()))Space.player.pickup(drops.get(i));
	    	 drops.remove(i);
	    	 }// if drop hits Space.player 
	     } 
	     //Background Manipulation
	}

	
	


	@Override
	public void render(float delta) {
		camera.update();
	    update();
	    batch.setProjectionMatrix(camera.combined);
	   
	    for(int i = 0; i<500; i++)  Gdx.graphics.getDeltaTime();
	   
	      batch.begin();
	      
	      font.setColor(Color.WHITE);
	      batch.draw(backgroundImg,background1.x,background1.y);
	      batch.draw(backgroundImg,background2.x,background2.y);
	      	
		    // Draw enemies
		    for(int i = 0; i<enemies.size();i++)batch.draw(enemies.get(i).getImg(), enemies.get(i).getRect().x,enemies.get(i).getRect().y);
		    //Draw Space.player shots
		    for(int i = 0; i<Space.player.getShots().size();i++)batch.draw(Space.player.getShots().get(i).getProjectileImg(), Space.player.getShots().get(i).getRect().x, Space.player.getShots().get(i).getRect().y);
		    
		    //Draw Enemy shots
		    for(int i = 0; i<enemyShots.size(); i++){
		    	batch.draw(enemyShots.get(i).getProjectileImg(),enemyShots.get(i).rectangle.x, enemyShots.get(i).rectangle.y);
		    }
		    
		  //Draw Space.player
		    batch.draw(Space.player.getShipImg(), Space.player.getShip().x, Space.player.getShip().y);
		    		
		    //Draw all drops
		    for(int i = 0; i<drops.size();i++)batch.draw(drops.get(i).getOrbImg(), drops.get(i).getRect().x, drops.get(i).getRect().y);
		    
		    //draw info using font
		      font.draw(batch, "Current Wave: "+wave, 5, 20);
		      //font.draw(batch, ((10+wave%4*10) - enemiesKilled) + " Enemies Left", 300, 20);
		      font.draw(batch, (Space.player.speed) + " Current Speed", 300, 20);
		      if(Space.player.currentForm==4)font.draw(batch, "Game over", 330, 240);
		      
		      if(Space.player.currentForm ==0)font.draw(batch, "Time Left in Form: " + (Space.player.fireFormDuration - Space.player.timeSinceTransform)/second, 5, 60);
		      else if(Space.player.currentForm == 1)font.draw(batch, "Time Left in Form: " + (Space.player.lightningFormDuration - Space.player.timeSinceTransform)/second, 5, 60);
		      else if(Space.player.currentForm == 2)font.draw(batch, "Time Left in form: " + (Space.player.windFormDuration - Space.player.timeSinceTransform)/second, 5, 60);
		      else font.draw(batch, "Default Form", 5, 60);

		      //draw HUD
		      
		      batch.draw(healthBarImg, (float)(38+Space.player.healthBarPosMod), 464);
		      //System.out.println("Health: "+Space.player.health+" HealthModifier: "+Space.player.healthBarPosMod);
		      
		      
		      //if (Space.player.lightningFormEnabled)batch.draw(main.lightningEnabledImg, 125, 480-43);
		      
		      //if (Space.player.windFormEnabled)batch.draw(main.lightningEnabledImg, 125, 480-43);
		      

	      batch.draw(timerBarImg, (float)(204+Space.player.timerBarPosMod), 442);
		      
		      batch.draw(hudImg, 0, 440);
		      
		      if (Space.player.fireFormEnabled){
		    	  batch.draw(imageLib.fireEnabledImg, 31, 443);
		      } 
		      
		      if (Space.player.lightningFormEnabled){
		    	  batch.draw(imageLib.lightningEnabledImg, 92, 443);
		      } 
		      
		      if (Space.player.windFormEnabled){
		    	  batch.draw(imageLib.windEnabledImg, 152, 443);
		      } 
		      for (int i=0; i<testExplosions.size();i++)batch.draw(explosionImg,testExplosions.get(i).getRect().x,testExplosions.get(i).getRect().y);


		    batch.end();
	}

	
	@Override
	public void pause() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void resume() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void dispose() {
		// TODO Auto-generated method stub
		Space.player.getShipImg().dispose();
	    enemyImg.dispose();
	    //laserSFX.dispose();
	    //backgroundMusic.dispose();
	    batch.dispose();
	}
	
	private void spawnEnemy() {
		//TODO change enemy type and enemy Img based upon wave, etc
		enemiesSpawned++;
	    enemies.add(new Enemy(imageLib, 0, wave));
	    lastSpawnTime = TimeUtils.nanoTime();
	   }

	private void destroyEnemy(int index) {
		// TODO Auto-generated method stub
		Rectangle explosion = new Rectangle();
		explosion.width = 60;
		explosion.height = 40;
		explosion.x = enemies.get(index).getRect().x;
		explosion.y = enemies.get(index).getRect().y;
		explosions.add(explosion);
		if(TimeUtils.nanoTime()%100<100)spawnDrop(index);
		enemies.remove(index);
		}
	
	private void spawnDrop(int index){
		 int random = (int) (TimeUtils.nanoTime()%100);
			if (random<33) {drops.add(new Loot(enemies.get(index).getRect(), lightningImg, 1)); }//System.out.println("Spawning Lightning Orb");}
			else if(random>=33 && random<66){drops.add(new Loot(enemies.get(index).getRect(), fireImg, 0));}//System.out.println("Spawning Fire Orb");}
			else if (random >=66) {drops.add(new Loot(enemies.get(index).getRect(), windImg, 2));}//System.out.println("Spawning Wind Orb");}
			}
	
	private void nextWave() {
		// TODO Auto-generated method stub
		wave++;
		enemiesKilled=0;
		enemiesSpawned = 0;
		enemiesLeft = 20+(wave*10);
		waveDuration = (20+(wave))*second;
		enemySpawnRate = waveDuration/enemiesLeft;
		enemyShotRate = enemySpawnRate;
		enemyVelocityBoost = ((wave%5)*50);
		enemyShotVelocityBoost = (wave*40);
		System.out.println("New Wave!!!");
		System.out.println("Current Wave: " +wave);
		System.out.println("Enemy Spawn Rate "+ enemySpawnRate/second);
		imageLib.setScreen(imageLib.shipScreen);

	}

	@Override
	public void show() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void hide() {
		// TODO Auto-generated method stub
		
	}
		}
	
	