package com.space;


import java.io.IOException;
import java.io.*;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.math.Rectangle;

public class PlayerDA  {
	private Player player;
	public PlayerDA (){}
	private FileHandle file = null; 
	boolean writeInitialized;
	
	public int save(Player playerSrc){
		// Overwrite this player with static player. 
		player = playerSrc;
		PrintWriter out = new PrintWriter(new FileWriter("output.dat", true)); // "append mode"
		//file = Gdx.files.local("testfile.txt");
		//writeInitialized = false;
		//writeInt(player.shipXp);
		//writeInt(player.shipLvl);
		return 0;
	}
	private void writeInt(int num){
		if(!writeInitialized){
			file.writeString(Integer.toString(num), false);
			writeInitialized = true;
		}
		else file.writeString(", " + Integer.toString(num), true);
	}
	private void writeLong(long num){
		if(!writeInitialized){
			file.writeString(Long.toString(num), false);
			writeInitialized = true;
		}
		else file.writeString(", " + Long.toString(num), true);
	}
	private void writeDouble(double num){
		if(!writeInitialized){
			file.writeString(Double.toString(num), false);
			writeInitialized = true;
		}
		else file.writeString(", " + Double.toString(num), true);
	}
	public int load(){
		// Open file, load all variables into this player class. Overwrite static player with this player.
		if(Gdx.files.internal("testfile.txt").exists()){
		FileHandle file = Gdx.files.internal("testfile.txt");
		
		try {
			file.reader().close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		}
		return 0;
	}
	private int readInt(){
		int output = 0;
		
		try {
			for(int i = 0;i<5;i++){
				output = (output*10) + file.reader().read();
			}
		} catch (IOException e) {
			try {
				file.reader().skip(2);
			} catch (IOException e1) {
				System.out.println("unskippable");
			}
		}
		System.out.println(output);
		return output;
	}
	private long readLong(){
		long output = 0;
		try {
			while(file.reader().read() != -1){
				output = (output*10) + file.read().read();
				}
		} catch (IOException e) {
			try {
				file.reader().skip(2);
			} catch (IOException e1) {
				System.out.println("unskippable");
			}
		}
		System.out.println(output);
		return output;
	}
	private double readDouble(){
		double output = 0;
		try {
			for(int i = 0;i<5;i++){
				output = (output*10) + file.reader().read();
			}
		} catch (IOException e) {
			try {
				file.reader().skip(2);
			} catch (IOException e1) {
				System.out.println("unskippable");
			}
		}
		return output;
	}
	
}
