package com.space;


import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.math.Rectangle;

public class PlayerDA {
	private Player player;
	public PlayerDA (){}
	private FileHandle file = null; 
	boolean writeInitialized;
	
	public int save(Player playerSrc){
		// Overwrite this player with static player. 
		player = playerSrc;
		file = Gdx.files.local("testfile.txt");
		writeInitialized = false;
		writeInt(player.shipXp);
		writeInt(player.shipLvl);
		return 0;
	}
	private void writeInt(int num){
		if(!writeInitialized){
			file.writeString(Integer.toString(num), false);
			writeInitialized = true;
		}
		else file.writeString(", " + Integer.toString(num), true);
	}
	private void writeLong(long num){
		if(!writeInitialized){
			file.writeString(Long.toString(num), false);
			writeInitialized = true;
		}
		else file.writeString(", " + Long.toString(num), true);
	}
	private void writeDouble(double num){
		if(!writeInitialized){
			file.writeString(Double.toString(num), false);
			writeInitialized = true;
		}
		else file.writeString(", " + Double.toString(num), true);
	}
	public int load(){
		// Open file, load all variables into this player class. Overwrite static player with this player.
		if(Gdx.files.internal("testfile.txt").exists()){
		FileHandle file = Gdx.files.internal("testfile.txt");
		
		}
		return 0;
	}
	private int readInt(){
		return Integer.parseInt(file.read);
	}
	private long readLong(){
		if(!writeInitialized){
			file.writeString(Long.toString(num), false);
			writeInitialized = true;
		}
		else file.writeString(", " + Long.toString(num), true);
	}
	private double readDouble(){
		if(!writeInitialized){
			file.writeString(Double.toString(num), false);
			writeInitialized = true;
		}
		else file.writeString(", " + Double.toString(num), true);
	}
	
}
